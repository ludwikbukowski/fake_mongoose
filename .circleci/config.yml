version: 2.1

orbs:
  mim:
    commands:
      install_erlang:
        parameters:
          otp:
            type: string
            description: Version of the Erlang package to install
        steps:
        - run:
            name: Install Erlang
            command: |
              wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
              sudo killall -9 apt-get || true && \
              sudo dpkg -i erlang-solutions_1.0_all.deb
              sudo apt-get update && \
              sudo apt-get install -y esl-erlang=<<parameters.otp>>
      fetch_packages:
        steps:
        - run:
            name: Install basic packages
            command: |
              sudo killall -9 apt-get || true && \
              sudo apt-get install unixodbc-dev -y && \
              sudo apt-get install unixodbc -y && \
              sudo apt-get install tdsodbc -y && \
              sudo apt-get install python-pip -y
    jobs:
      build_and_small_tests:
        parallelism: 1
        machine:
          image: ubuntu-1604:201903-01
        parameters:
          otp:
            type: string
            description: Version of the Erlang package to install
          build_releases:
            type: boolean
            description: Flag to build release or not
            default: true

        environment:
          SKIP_RELEASE: 1
          SKIP_COV: 0
          PRESET: small_tests
        working_directory: ~/app

        steps:
          - checkout
          - install_erlang:
              otp: <<parameters.otp>>
          - run:
              name: Prepare for cache
              command: |
                ./tools/circleci-otp-to-str.sh <<parameters.otp>> > otp_version
          - restore_cache:
              key: build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
          - restore_cache:
              key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
          - fetch_packages
          - run:
              name: Get deps
              command: |
                tools/configure with-all
                ./rebar3 get-deps
          - save_cache:
              key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
              paths:
                - ~/.cache/rebar3
                - _build/default/lib
          - run: ./rebar3 compile
          - run:
              name: Make Certs
              command: |
                make certs
#          - run:
#              name: Run Small Tests
#              command: |
#                KEEP_COVER_RUNNING=1 ./tools/travis-test.sh -p $PRESET -s true
          - run:
              name: Install Releases
              command: |
                if [ <<parameters.build_releases>> ]; then make devrel; fi
          - run:
              name: Build Big Tests
              command: |
                tools/travis-build-tests.sh
          - save_cache:
              key: build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
              paths: ./


      dialyzer:
        parallelism: 1
        machine:
          image: ubuntu-1604:201903-01
        working_directory: ~/app
        parameters:
          otp:
            type: string
            description: Version of the Erlang package to install
        steps:
          - checkout
          - fetch_packages
          - install_erlang:
              otp: <<parameters.otp>>
          - run:
              name: Run Dialyzer
              command: |
                KEEP_COVER_RUNNING=1 ./tools/travis-test.sh -p dialyzer_only -s false
                
      package:
        parallelism: 1
        machine:
          image: ubuntu-1604:201903-01
        working_directory: ~/app
        parameters:
          platform:
            type: enum
            enum: [centos7, debian_stretch]
            description: Platform type
        environment:
          pkg_PLATFORM: <<parameters.platform>>
          PRESET: pkg
        steps:
          - checkout
          - run:
              name: Build package
              command: |
                KEEP_COVER_RUNNING=1 ./tools/travis-test.sh -p pkg -s false
      big_tests:
        parallelism: 1
        machine:
          image: ubuntu-1604:201903-01
        working_directory: ~/app
        parameters:
          otp:
            type: string
            description: Version of the Erlang package to install
          preset:
            type: enum
            enum: [internal_mnesia, mysql_redis, odbc_mssql_mnesia, ldap_mnesia,
                   elasticsearch_and_cassandra_mnesia, pgsql_mnesia, riak_mnesia]
            description: Preset to run
            default: internal_mnesia
          db:
            type: string
            description: Database to use
            default: mnesia
          tls_dist:
            type: boolean
            description: Erlang distribution with TLS enabled
            default: false
        environment:
          MIX_ENV: test
          PRESET: <<parameters.preset>>
          DB: <<parameters.db>>
          TLS_DIST: <<parameters.tls_dist>>
          ELASTICSEARCH_VERSION: 5.6.9
          CASSANDRA_VERSION: 3.9
          TEST_SPEC: mam.spec
          REDIS_VERSION: 3.2.10
        steps:
          - checkout
          - install_erlang:
              otp: <<parameters.otp>>
          - fetch_packages
          - run:
              name: Prepare for cache
              command: |
                ./tools/circleci-otp-to-str.sh <<parameters.otp>> > otp_version
          - restore_cache:
              keys:
                - build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
          - restore_cache:
              keys:
                - deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
          - run:
              name: Setup database
              command: |
                tools/travis-setup-db.sh
                if [ $PRESET = ldap_mnesia ]; then sudo tools/travis-setup-ldap.sh; fi
                sudo tools/travis-setup-rmq.sh; tools/setup-redis.sh
                echo '127.0.0.1 muc.localhost' | sudo tee -a /etc/hosts
          - run:
              name: Run Big Tests
              command: |
                KEEP_COVER_RUNNING=1 ./tools/travis-test.sh -p $PRESET -s false
          - store_test_results:
              path: big_tests/ct_results_formated
          - run:
              name: Coverage
              when: on_success
              command: |
                echo "Success!"
                sudo pip install codecov && codecov
                ./rebar3 codecov analyze
                codecov --disable=gcov --env PRESET
                ./rebar3 coveralls send
          - run:
              name: Build Failed - Logs
              when: on_fail
              command: |
                echo "Failure!"
                if [ -s _build/mim1/rel/mongooseim/log/crash.log ]; then cat _build/mim1/rel/mongooseim/log/crash.log; fi
                if [ -s _build/mim2/rel/mongooseim/log/crash.log ]; then cat _build/mim2/rel/mongooseim/log/crash.log; fi
                tail -100 _build/mim1/rel/mongooseim/log/ejabberd.log
                tail -100 _build/mim2/rel/mongooseim/log/ejabberd.log
          - run:
              name: Upload results
              when: always
              command: |
                  tools/circleci-prepare-log-dir.sh
                  if [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then tools/circleci-upload-to-s3.sh; fi


workflows:
  version: 2
  build_and_test:
    jobs:
#      - mim/package:
#          name: centos7
#          platform: centos7
#          context: mongooseim-org
#      - mim/package:
#          name: debian_stretch
#          platform: debian_stretch
#          context: mongooseim-org
#      - mim/build_and_small_tests:
#          name: otp_21_3_small_tests
#          otp: 1:21.3.8.4-1
#          context: mongooseim-org
      - mim/build_and_small_tests:
          name: otp_22_small_tests
          otp: 1:22.0.4-1
#          context: mongooseim-org
#      - mim/dialyzer:
#          name: dialyzer
#          otp: 1:22.0.4-1
##          context: mongooseim-org
#          requires:
#            - otp_22_small_tests
#      - mim/big_tests:
#          name: mysql_redis
#          otp: 1:21.3.8.4-1
#          preset: mysql_redis
#          db: mysql
#          context: mongooseim-org
#          requires:
#            - otp_21_3_small_tests
      - mim/big_tests:
          name: internal_mnesia
          otp: 1:22.0.4-1
          preset: odbc_mssql_mnesia
          db: mssql
#          context: mongooseim-org
          requires:
            - otp_22_small_tests
#      - mim/big_tests:
#          name: ldap_mnesia
#          otp: 1:22.0.4-1
#          preset: ldap_mnesia
#          db: mnesia
#          context: mongooseim-org
#          requires:
#            - otp_22_small_tests
#      - mim/big_tests:
#          name: internal_mnesia
#          otp: 1:22.0.4-1
#          preset: internal_mnesia
#          db: mnesia
#          tls_dist: true
#          context: mongooseim-org
#          requires:
#            - otp_22_small_tests
#      - mim/big_tests:
#          name: elasticsearch_and_cassandra
#          otp: 1:22.0.4-1
#          preset: elasticsearch_and_cassandra_mnesia
#          db: "elasticsearch cassandra"
#          context: mongooseim-org
#          requires:
#            - otp_22_small_tests
#      - mim/big_tests:
#          name: pgsql_mnesia
#          otp: 1:21.3.8.4-1
#          preset: pgsql_mnesia
#          db: pgsql
#          context: mongooseim-org
#          requires:
#            - otp_21_3_small_tests
#      - mim/big_tests:
#          name: riak_mnesia
#          otp: 1:21.3.8.4-1
#          preset: riak_mnesia
#          db: riak
#          context: mongooseim-org
#          requires:
#            - otp_21_3_small_tests
